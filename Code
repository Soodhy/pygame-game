import pygame
import sys
import os
import PIL
from random import randint

import pygame.image

pygame.init()
screen = pygame.display.set_mode((1920, 1080))
clock = pygame.time.Clock()
pygame.display.set_caption("Gaming grandpa")

# Defining Player --------------------
class Player(pygame.sprite.Sprite):
    def __init__(self, posX, posY, moveX, moveY, facingright, width, height):
        super().__init__()
        self.width = width
        self.height = height
        self.image = pygame.transform.scale(pygame.image.load('files/playerAFK1.png'), (width, height))
        self.rect = self.image.get_rect()
        self.rect = self.rect.inflate(-330, -250)
        self.rect.x = posX
        self.rect.y = posY
        self.moveX = moveX
        self.moveY = moveY
        self.rect.move_ip(-365, -360)
        self.facingright = facingright
        self.frames_run_R = []
        self.frames_run_L = []
        self.frames_afk_R = []
        self.frames_afk_L = []

        walkFrames = 5
        for i in range(1, walkFrames + 1):
            self.frames_run_R.append(pygame.image.load(f'files/playerRunning{i}.png').convert_alpha())
        for i in self.frames_run_R:
            self.frames_run_L.append(pygame.transform.flip(i, True, False))
        afkFrames = 2
        for a in range(1, afkFrames + 1):
            self.frames_afk_R.append(pygame.image.load(f'files/playerAFK{a}.png').convert_alpha())
        for a in self.frames_afk_R:
            self.frames_afk_L.append(pygame.transform.flip(a, True, False))

    def update(self):
        global walking
        global walkingAni
        global afkAni
        global afk

        print(player.rect)
        pygame.draw.rect(screen, (255, 0, 0), player.rect, 2)

        if afk:
            if self.facingright and afkAni < 30:
                self.image = self.frames_afk_R[0]
            if self.facingright and afkAni >= 30:
                self.image = self.frames_afk_R[1]
            if not self.facingright and afkAni < 30:
                self.image = self.frames_afk_L[0]
            if not self.facingright and afkAni >= 30:
                self.image = self.frames_afk_L[1]

        key = pygame.key.get_pressed()
        if key[pygame.K_w]:
            self.rect.y -= self.moveY
            self.rect.move_ip(0, -self.moveY)
            walking = True
            afk = False
            if self.facingright:
                self.image = self.frames_run_R[walkingAni % 5]
            if not self.facingright:
                self.image = self.frames_run_L[walkingAni % 5]
            if pygame.sprite.groupcollide(playerGroup, obsGroup, False, False):
                pass
        if key[pygame.K_s]:
            self.rect.y += self.moveY
            self.rect.move_ip(0, self.moveY)
            walking = True
            afk = False
            if self.facingright:
                self.image = self.frames_run_R[walkingAni % 5]
            if not self.facingright:
                self.image = self.frames_run_L[walkingAni % 5]
        if key[pygame.K_d]:
            self.rect.x += self.moveX
            self.rect.move_ip(self.moveX, 0)
            walking = True
            self.facingright = True
            afk = False
            self.image = self.frames_run_R[walkingAni % 5]
        if key[pygame.K_a]:
            self.rect.x -= self.moveX
            self.rect.move_ip(-self.moveX, 0)
            walking = True
            self.facingright = False
            afk = False
            self.image = self.frames_run_L[walkingAni % 5]
        # Quits game with ESCAPE KEY
        elif key[pygame.K_ESCAPE]:
            pygame.quit()
            sys.exit()
        else:
            walking = False
            afk = True

        walkingAni += 1
        if walkingAni >= 20:
            walkingAni = 0

        afkAni += 1
        if afkAni >= 60:
            afkAni = 0


walkingAni = 0
afkAni = 0
walking = False
afk = True
playerGroup = pygame.sprite.Group()
player = Player(500, 500, 15, 15, True, 500, 500)
playerGroup.add(player)

# Defining Obstacles
class Small(pygame.sprite.Sprite):
    def __init__(self, posX, posY, width, height):
        super().__init__()
        self.width = width
        self.height = height
        self.image = pygame.transform.scale(pygame.image.load("files/rock1.png"), (self.width, self.height))
        self.rect = self.image.get_rect()
        self.rect = (posX, posY)
        self.x = posX
        self.y = posY

    def update(self):
        pygame.draw.rect(screen, (255, 0, 0), (rock.x, rock.y, 77, 75), 2)


obsGroup = pygame.sprite.Group()
rock = Small(800, 600, 85, 70)
obsGroup.add(rock)

# Defining Background ----------------------------------
bgImage = pygame.image.load('files/Spawn Floor2.png')

# Main Code ---------------------------------
game = True
while game:
    for e in pygame.event.get():
      if e.type == pygame.QUIT:
        pygame.quit()
        sys.exit()

    screen.blit(bgImage, (0, 0))

    playerGroup.update()
    playerGroup.draw(screen)
    rock.update()
    obsGroup.draw(screen)

    pygame.display.update()
    clock.tick(60)
